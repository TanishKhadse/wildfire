// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"

}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  username String? @unique
  email String? @unique
  emailVerified DateTime? 
  image String?
  profileImage String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followingIds String[] @db.ObjectId
  hasNotification Boolean?


  rankings Ranking[]
  comments Comment[]
  notifications Notification[]
}

model Ranking {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  likedIds String[] @db.ObjectId
  itemIds String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // item Item @relation(fields: [itemIds], references: [id], onDelete: Cascade)
  items Item[]
  comments Comment[]
}

model Item {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String?
  label String?
  userId String @db.ObjectId
  // rankingId String


  ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  // updatedAt @upd
  updatedAt DateTime @updatedAt
  userId String
  rankingId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  userId String @db.ObjectId 
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


}



